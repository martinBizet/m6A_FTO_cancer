#! /usr/bin/env python
#-*- coding: utf-8 -*-
 
# =======================================================================
#            ---------------------------------------------------------
#            Context : unify compare_bed files into an .xls peak file
#                              By : BIZET Martin
#                                 Year : 2016
#            --------------------------------------------------------
# =======================================================================

##### ========================
####             
###    MAIN 
##               
# ============================

import sys
import os

#Default
ofile = ''
iDir = ''
cond = 'union'

#Parse arguments
args = sys.argv
for i in range(1, len(args)):
	if (args[i] == '-h') or (args[i] == '-help'):
		print 'Unify compare_bed files into an .xls peak file\n\t-i or -inputFolder: folder containing compare_bed output\n\t-o or -out: output file\n\t-cond: condition to intersect can be \'union\', \'intersect\', or one of the condition [default=\'union\']\n\t-h or -help: this help' 
		argTyp = ''
		argVal = ''
	elif '=' in args[i]:
		el = args[i].split('=')
		argTyp = el[0]
		argVal = el[1]
	elif i < (len(args)-1):
		argTyp = args[i]
		argVal = args[i+1]
		
	if (argTyp == '-i') or (argTyp == '-inputFolder'):
		iDir = argVal
	elif (argTyp == '-o') or (argTyp == '-out'):
		ofile = argVal
	elif (argTyp == '-cond'):
		cond = argVal

if iDir[-1] != '/':
	iDir += '/'
	
peaks = {}
if (iDir != '') and (ofile != ''):
	toWrite='# This file is generated by peak_union from MACS version 2.1.0.20150731 peaks\n'
	toWrite +='chr\tstart\tend\tlength\tabs_summit\tpileup\t-log10(pvalue)\tfold_enrichment\t-log10(qvalue)\tname\n'
	filenames = os.listdir(iDir)
	s = 1
	for fnam in filenames:
		if '.tsv' in fnam:
			if ('_specific_' in fnam) and (cond != 'intersect'):
				if (cond == 'union') or ('_specific_' + cond in fnam): #not only cond because for example 'mC' is in '_specific_hmC'
					fi = open(iDir + fnam)
					for lin in fi:
						lin = lin.rstrip()
						lin = lin.split('\t')
						#chr	start	end	length	abs_summit	pileup	-log10(pvalue)	fold_enrichment	-log10(qvalue)	name
						key = tuple(lin[0:3])
						lin[len(lin)-1] = 's'+ str(s) + '_' + lin[len(lin)-1]
						if not key in peaks:
							toWrite += '\t'.join(lin) + '\n'
							peaks[key] = ''
					fi.close()
					s += 1
			elif '_intersectbed' in fnam:
				fi = open(iDir + fnam)
				for lin in fi:
					lin = lin.rstrip()
					lin = lin.split('\t')
					#chr1	9535622	9535912	291	9535766	68.53	28.89991	5.34836	23.94899	MACS_peak_1	chr1	9535555	9537070	1516	9536442	190.38	114.40820	9.11339	109.97927	MACS_peak_8b	290
					chrom = lin[0]
					sta = min(int(lin[1]), int(lin[11]))
					en = max(int(lin[2]), int(lin[12]))
					leng = str(en-sta+1)
					summ = str( (sta+en)/2 )
					nam = lin[9] + '_' + lin[19]
					sta = str(sta)
					en = str(en)
					key = (chrom, sta, en)
					if not key in peaks:
						toWrite += '\t'.join([chrom, sta, en, leng, summ, '0.0', '0.0', '0.0', '0.0', nam]) + '\n'
						peaks[key] = ''
				fi.close()
	fi = open(ofile, 'w')
	fi.write(toWrite)
	fi.close()	
